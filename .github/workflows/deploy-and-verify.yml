name: Deploy and Verify Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  verify-deployment:
    name: Verify Production Deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for Render deployment
        run: |
          echo "‚è≥ Waiting 60 seconds for Render to detect push and start deploying..."
          sleep 60

      - name: Monitor deployment and verify
        run: |
          echo "üîç Monitoring Render deployment status..."

          # Wait up to 10 minutes for deployment to complete
          ATTEMPTS=0
          MAX_ATTEMPTS=60

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            # Check if backend health endpoint is responding
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://partay-backend.onrender.com/health 2>/dev/null || echo "000")

            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "‚úÖ Backend is responding (attempt $((ATTEMPTS + 1))/$MAX_ATTEMPTS)"

              # Wait a bit more to ensure deployment is fully complete
              echo "‚è≥ Waiting 30 seconds for deployment to stabilize..."
              sleep 30

              break
            else
              echo "‚è≥ Backend status: $HEALTH_STATUS - waiting for deployment... (attempt $((ATTEMPTS + 1))/$MAX_ATTEMPTS)"
            fi

            ATTEMPTS=$((ATTEMPTS + 1))
            sleep 10
          done

          if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Deployment timeout - backend not responding after 10 minutes"
            exit 1
          fi

      - name: Run deployment verification
        run: |
          echo "==========================================
          üîç RUNNING DEPLOYMENT VERIFICATION
          =========================================="

          chmod +x ./scripts/verify-deployment.sh
          ./scripts/verify-deployment.sh

          VERIFICATION_EXIT_CODE=$?

          if [ $VERIFICATION_EXIT_CODE -eq 0 ]; then
            echo ""
            echo "=========================================="
            echo "‚úÖ DEPLOYMENT VERIFIED SUCCESSFULLY!"
            echo "=========================================="
            echo ""
            echo "Production is healthy and ready to use."
            exit 0
          else
            echo ""
            echo "=========================================="
            echo "‚ùå DEPLOYMENT VERIFICATION FAILED!"
            echo "=========================================="
            echo ""
            echo "Production has issues that need to be fixed."
            echo "Check the verification output above for details."
            exit 1
          fi

      - name: Notify on success
        if: success()
        run: |
          echo "üéâ Deployment to production completed successfully!"
          echo "All verification checks passed."

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è DEPLOYMENT VERIFICATION FAILED!"
          echo ""
          echo "Action required:"
          echo "1. Check the verification output above"
          echo "2. Fix any data consistency issues"
          echo "3. Fix any failing endpoints"
          echo "4. Re-run the deployment"
          echo ""
          echo "Common issues:"
          echo "- Data mismatch between stats and actual counts"
          echo "- 500 errors on critical endpoints"
          echo "- Missing warehouse data"
          echo "- Missing inventory photos"
